<?php

namespace BoncoinBundle\Repository;

use Doctrine\Common\Collections\Criteria;

/**
 * AnnonceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnonceRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Return a list of annonces
     *
     * @param string|null $titleKeywords
     * @param null $minPrice
     * @param null $maxPrice
     * @return array
     */
    public function findBySearch(string $titleKeywords = null, $minPrice = null, $maxPrice = null)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('a')
            ->from('BoncoinBundle:Annonce', 'a');

        $parameters = [];

        $andX = $qb->expr()->andX();

        if (!is_null($titleKeywords)) {
            $parameters['titleKeywords'] = '%' . $titleKeywords . '%';
            $andX->add($qb->expr()->like('a.title', ':titleKeywords'));
        }

        if (!is_null($minPrice)) {
            $parameters['minPrice'] = $minPrice;
            $andX->add($qb->expr()->gte('a.price', ':minPrice'));
        }

        if (!is_null($maxPrice)) {
            $parameters['maxPrice'] = $maxPrice;
            $orX = $qb->expr()->orX();
            $orX->add($qb->expr()->lte('a.price', ':maxPrice'));
            $orX->add($qb->expr()->isNull('a.price'));
            $andX->add($orX);
        }

        // If parameters, set query conditions
        if ($andX->count() > 0) {
            $qb->andWhere($andX);
            $qb->setParameters($parameters);
        }

        $qb->addCriteria(
            Criteria::create()
                ->orderBy(array('price' => Criteria::DESC))
        );

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Delete all annonces from database
     */
    public function deleteAll()
    {
        $connection = $this->getEntityManager()->getConnection();
        $dbPlatform = $connection->getDatabasePlatform();

        $connection->executeUpdate($dbPlatform->getTruncateTableSQL('annonce'));
    }

}
